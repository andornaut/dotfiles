export EDITOR=vim
export SYSTEMD_EDITOR=$EDITOR
export GOG_DEFAULT_REPOSITORY_NAME=andornaut
export GOG_DO_NOT_CREATE_BACKUPS=any-value-is-true
export GOG_IGNORE_FILES_REGEX='^install$'
export GOPATH="${HOME}"
export HISTSIZE=5000
export MRS_HIDE_EDITOR_INSTRUCTIONS=any-value-is-true
export PATH=${PATH}:${HOME}/bin:${HOME}/.local/bin
#export PIPENV_VENV_IN_PROJECT=1

function runCached {
    local command=$@
    if which cache-command >/dev/null; then
        cache-command -e 86400 -b /tmp/cache-command -- ${command}
    else
        # Use `eval` to avoid a "command not found" error when using zsh
        eval ${command}
    fi
}

function httptunnel {
    [[ "$#" -gt 1 && "$#" -lt 5 ]] || { echo 'Usage: http-tunnel jumpHost targetHost [remotePort] [localPort]' >&2 ; return; }
    local jumpHost=$1
    local targetHost=$2
    local remotePort=${3-80}
    local localPort=${4-1111}
    local protocol="$([[ ${remotePort} == "80" ]] && echo http || echo https)"
    echo "Make sure that 'AllowTCPForwarding yes' is set in ${jumpHost}:/etc/ssh/sshd_config"

    ( sleep 3 ; xdg-open ${protocol}://localhost:${localPort} ;) &
    ssh -vL ${localPort}:${targetHost}:${remotePort} -Nf ${jumpHost} 
}

function p {
    if [[ $# -ne 1 ]]; then 
        echo 'Usage: p directoryPrefix';
        return 1
    fi

    local globPattern=$1
    local searchPaths=("${HOME}/src/github.com/andornaut" "${HOME}/src/github.com/[Ss]*" "${HOME}/src/github.com/*" "${HOME}/src" "${HOME}/src/*")
    local projectPath root
    for root in ${searchPaths[@]}; do
        if [[ ! -d "${root}" ]]; then
            continue
        fi
        if [[ "${globPattern}" =~ .*"/".* ]]; then
            projectPath="$(find "${root}" -maxdepth 2 -mindepth 1 -type d -ipath '*'${globPattern}'*'|sort|head -n1)"
        else
            projectPath="$(find "${root}" -maxdepth 1 -mindepth 1 -type d -iname ${globPattern}'*'|sort|head -n1)"
        fi
        if [[ ! -d "${projectPath}" ]]; then
            continue
        fi

        cd "${projectPath}"
        echo "${projectPath}"

        # Git
        if [[ -d .git ]]; then
            local branch
            if ! branch=$(git cb 2>/dev/null); then
                branch=$(git dbr)
            fi
            echo "git: ${branch}"
        fi
        # JavaScript
        if [[ -n $NVM_DIR && -d $NVM_DIR && -f .nvmrc ]]; then
            nvm use
        fi
        # Python
        if poetry env info &>/dev/null; then
            poetry shell
        elif [[ -f Pipfile ]] && pipenv --venv &>/dev/null; then
            pipenv shell
        elif [[ -d .venv ]]; then
            source .venv/bin/activate
        fi
        break
    done
}

PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\W\[\033[00m\]\$ '
PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"

# Kubernetes
if which kubectl >/dev/null; then
    source <(runCached kubectl completion bash)
fi

# JavaScript
# nvm is initialized in ~/.bashrc
if which npm >/dev/null; then
    export PATH=${PATH}:$(runCached npm config --no-update-notifier --silent get prefix)/bin
fi

# Ruby
for f in /usr/local/share/chruby /opt/homebrew/Cellar/chruby/*/share/chruby; do
    if [[ -d ${f} ]]; then
        source ${f}/chruby.sh
        source ${f}/auto.sh
        break
    fi
done

# Rust
if [[ -f "${HOME}/.cargo/env" ]]; then
    source "${HOME}/.cargo/env"
fi
